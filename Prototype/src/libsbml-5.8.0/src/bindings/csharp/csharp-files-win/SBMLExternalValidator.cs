/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace libsbml {

using System;
using System.Runtime.InteropServices;

public class SBMLExternalValidator : SBMLValidator {
	private HandleRef swigCPtr;
	
	internal SBMLExternalValidator(IntPtr cPtr, bool cMemoryOwn) : base(libsbmlPINVOKE.SBMLExternalValidator_SWIGUpcast(cPtr), cMemoryOwn)
	{
		//super(libsbmlPINVOKE.SBMLExternalValidatorUpcast(cPtr), cMemoryOwn);
		swigCPtr = new HandleRef(this, cPtr);
	}
	
	internal static HandleRef getCPtr(SBMLExternalValidator obj)
	{
		return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
	}
	
	internal static HandleRef getCPtrAndDisown (SBMLExternalValidator obj)
	{
		HandleRef ptr = new HandleRef(null, IntPtr.Zero);
		
		if (obj != null)
		{
			ptr             = obj.swigCPtr;
			obj.swigCMemOwn = false;
		}
		
		return ptr;
	}

  ~SBMLExternalValidator() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libsbmlPINVOKE.delete_SBMLExternalValidator(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  
/**
   * Constructor.
   */ public
 SBMLExternalValidator() : this(libsbmlPINVOKE.new_SBMLExternalValidator__SWIG_0(), true) {
  }

  
/**
   * Copy constructor.
   */ public
 SBMLExternalValidator(SBMLExternalValidator arg0) : this(libsbmlPINVOKE.new_SBMLExternalValidator__SWIG_1(SBMLExternalValidator.getCPtr(arg0)), true) {
    if (libsbmlPINVOKE.SWIGPendingException.Pending) throw libsbmlPINVOKE.SWIGPendingException.Retrieve();
  }

  
/**
   * Creates and returns a deep copy of this converter.
   * 
   * @return a (deep) copy of this converter.
   */ public
 SBMLValidator clone() {
    IntPtr cPtr = libsbmlPINVOKE.SBMLExternalValidator_clone(swigCPtr);
    SBMLValidator ret = (cPtr == IntPtr.Zero) ? null : new SBMLValidator(cPtr, true);
    return ret;
  }

  
/** 
   * the actual conversion 
   * 
   * @return status code represeting success/failure/conversion impossible
   */ public
 long validate() { return (long)libsbmlPINVOKE.SBMLExternalValidator_validate(swigCPtr); }

  
/** 
   * @return the program name of the validator to be run
   */ public
 string getProgram() {
    string ret = libsbmlPINVOKE.SBMLExternalValidator_getProgram(swigCPtr);
    return ret;
  }

  
/**
   * Sets the name of the program to run
   *
   * @param program the program to be started
   */ public
 void setProgram(string program) {
    libsbmlPINVOKE.SBMLExternalValidator_setProgram(swigCPtr, program);
  }

  
/**
   * @return the output file name (this is the file the external program will write)
   */ public
 string getOutputFileName() {
    string ret = libsbmlPINVOKE.SBMLExternalValidator_getOutputFileName(swigCPtr);
    return ret;
  }

  
/**
   * Sets the output file name
   *
   * @param outputFileName the name of the output XML file
   */ public
 void setOutputFileName(string outputFileName) {
    libsbmlPINVOKE.SBMLExternalValidator_setOutputFileName(swigCPtr, outputFileName);
  }

  
/** 
   * @return the name of the SBML file (the document of this validator will be written to it)
   */ public
 string getSBMLFileName() {
    string ret = libsbmlPINVOKE.SBMLExternalValidator_getSBMLFileName(swigCPtr);
    return ret;
  }

  
/**
   * Sets the filename for the temporary file to be created
   *
   * @param sbmlFileName the temporary name
   */ public
 void setSBMLFileName(string sbmlFileName) {
    libsbmlPINVOKE.SBMLExternalValidator_setSBMLFileName(swigCPtr, sbmlFileName);
  }

  
/**
   * Clear all additional arguments
   */ public
 void clearArguments() {
    libsbmlPINVOKE.SBMLExternalValidator_clearArguments(swigCPtr);
  }

  
/** 
   * Adds the given argument to the list of additional arguments 
   *
   * @param arg the argument
   */ public
 void addArgument(string arg) {
    libsbmlPINVOKE.SBMLExternalValidator_addArgument(swigCPtr, arg);
  }

  
/** 
   * @return the number of arguments. 
   */ public
 long getNumArguments() { return (long)libsbmlPINVOKE.SBMLExternalValidator_getNumArguments(swigCPtr); }

  
/** 
   * Returns the argument for the given index. 
   * 
   * @param n the zero based index of the argument. 
   *
   * @return the argument at the given index. 
   */ public
 string getArgument(long n) {
    string ret = libsbmlPINVOKE.SBMLExternalValidator_getArgument(swigCPtr, n);
    return ret;
  }

}

}
