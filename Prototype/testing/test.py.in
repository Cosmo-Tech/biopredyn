# coding=utf-8

## @package biopredyn
## @author: $Author$
## @date: $Date$
## @copyright: $Copyright: [2013-2014] BioPreDyn $
## @version: $Revision$

import sys
import os
import unittest

# Where to look for biopredyn package depends on the operating system
if sys.platform == "win32":
  biopredyn_path = '${CMAKE_SOURCE_DIR}/Prototype/python'
else:
  biopredyn_path = '${CMAKE_BINARY_DIR}/Prototype/python'

# Find the path to the libsedml Python package
for r, d, f in os.walk('${CMAKE_BINARY_DIR}/install'):
  for filename in f:
    if filename == "libsedml.py":
      sys.path.append(os.path.abspath(r))
      break

# Find the path to the libsbmlsim Python package
for r, d, f in os.walk('${CMAKE_BINARY_DIR}/install'):
  for filename in f:
    if filename == "libsbmlsim.py":
      sys.path.append(os.path.abspath(r))
      break

# Find the path to the libnuml Python package
for r, d, f in os.walk('${CMAKE_BINARY_DIR}/install'):
  for filename in f:
    if filename == "libnuml.py":
      sys.path.append(os.path.abspath(r))
      break

# Find the path to the biopredyn Python package
for r, d, f in os.walk(biopredyn_path):
  for filename in f:
    if filename == "main.py":
      sys.path.append(os.path.abspath(r))
      break

import numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

import libsbml
import libsedml
import libnuml
import model
import workflow
import result
import resources

## Base class for BioPreDyn test cases.
class GenericTestCase(unittest.TestCase):
  
  def setUp(self):
    user = "dashuser-biopredyn"
    password = "Nie8eir2"
    self.manager = resources.ResourceManager()
    self.manager.add_password(
      "https://thecosmocompany.com/svn/repos/SVN/BioPreDyn", user, password)

## GenericTestCase derived class for SBML related tests.
class SBMLTestCase(GenericTestCase):
  
  def test_local_import(self):
    local = os.path.abspath('${CMAKE_CURRENT_SOURCE_DIR}/FEBS_antimony.xml')
    mod = model.Model(self.manager, source=local)
    self.assertTrue(mod.check())
  
  def test_server_import(self):
    mod = model.Model(self.manager,
      source='https://thecosmocompany.com/svn/repos/SVN/BioPreDyn/trunk/Prototype/data/FEBS_copasi.xml')
    self.assertTrue(mod.check())
  
  def test_biomodels_import(self):
    mod = model.Model(self.manager,
      source='urn:miriam:biomodels.db:BIOMD0000000001')
    self.assertTrue(mod.check())
  
  def test_write_model(self):
    mod = model.Model(self.manager,
      source='urn:miriam:biomodels.db:BIOMD0000000001')
    mod.write_sbml('${CMAKE_CURRENT_BINARY_DIR}/test_write_model.xml')

## GenericTestCase derived class for SED-ML related tests.
class SEDMLTestCase(GenericTestCase):
  
  def test_libsbmlsim_time_course(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_graphical_output.xml',
      res_man=self.manager)
    flow.run_tasks()
    self.assertEqual(
      len(flow.get_task_by_id('task_1').get_result().get_time_steps()), 201)

## GenericTestCase derived class for Output related tests
class OutputTestCase(GenericTestCase):
  
  def test_graphical_output(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_graphical_output.xml',
      res_man=self.manager)
    flow.run_tasks()
    flow.process_outputs(True)
  
  def test_3D_graphical_output(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_3D_graphical_output.xml',
      res_man=self.manager)
    flow.run_tasks()
    flow.process_outputs(True)
  
  def test_csv_report(self):
    flow = workflow.WorkFlow('${CMAKE_CURRENT_SOURCE_DIR}/test_report.xml',
      res_man=self.manager)
    flow.run_tasks()
    flow.process_outputs(True, '${CMAKE_CURRENT_BINARY_DIR}/test_output.csv')
  
  def test_numl_report(self):
    flow = workflow.WorkFlow('${CMAKE_CURRENT_SOURCE_DIR}/test_report.xml',
      res_man=self.manager)
    flow.run_tasks()
    flow.process_outputs(True, '${CMAKE_CURRENT_BINARY_DIR}/test_output.xml')

## GenericTestCase derived class for Result related tests
class ResultTestCase(GenericTestCase):
  
  def test_csv_import(self):
    res = result.Result()
    res.import_from_csv_file(
      '${CMAKE_CURRENT_SOURCE_DIR}/3D_data.csv', self.manager)
  
  def test_numl_import(self):
    res = result.Result()
    res.import_from_numl_file(
      '${CMAKE_CURRENT_SOURCE_DIR}/FEBS_numerical_data.xml', self.manager)

## GenericTestCase derived class for XPath related tests
class XPathTestCase(GenericTestCase):
  
  def test_unresolved_xpath(self):
    local = os.path.abspath('${CMAKE_CURRENT_SOURCE_DIR}/FEBS_antimony.xml')
    mod = model.Model(self.manager, source=local)
    self.assertRaises(SystemExit, mod.evaluate_xpath,
      '/sbml:sbml/sbml:model/sbml:listOfParameters/sbml:parameter[@id="bad_id"]/@value')
  
  def test_read_value(self):
    local = os.path.abspath('${CMAKE_CURRENT_SOURCE_DIR}/FEBS_antimony.xml')
    mod = model.Model(self.manager, source=local)
    value = mod.evaluate_xpath(
      '/sbml:sbml/sbml:model/sbml:listOfParameters/sbml:parameter[@id="k2"]/@value')
    self.assertEqual(float(value[0]), 0.8)
  
  def test_return_node_list(self):
    local = os.path.abspath('${CMAKE_CURRENT_SOURCE_DIR}/FEBS_antimony.xml')
    mod = model.Model(self.manager, source=local)
    list = mod.evaluate_xpath('//sbml:reaction')
    self.assertEqual(len(list), 3)

## GenericTestCase derived class for Change related tests
class ChangeTestCase(GenericTestCase):
  
  def test_remove_xml(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_remove_xml.xml',
      res_man=self.manager)
    pre_change = flow.get_model_by_id('edelstein').evaluate_xpath(
      '//sbml:species')
    self.assertEqual(len(pre_change), 12)
    flow.get_model_by_id('edelstein').apply_changes()
    post_change = flow.get_model_by_id('edelstein').evaluate_xpath(
      '//sbml:species')
    self.assertEqual(len(post_change), 11)
  
  def test_attribute_value(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_change_attribute.xml',
      res_man=self.manager)
    flow.get_model_by_id('edelstein').apply_changes()
    attr_value = flow.get_model_by_id('edelstein').evaluate_xpath(
      "/sbml:sbml/sbml:model[@id='BIOMD0000000001']/sbml:listOfSpecies/sbml:species[@id='B']/@initialAmount")
    self.assertEqual(float(attr_value[0]), 1.66058e-05)
  
  def test_compute_value(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_compute_change.xml',
      res_man=self.manager)
    flow.get_model_by_id('edelstein').apply_changes()
    attr_value = flow.get_model_by_id('edelstein').evaluate_xpath(
      "/sbml:sbml/sbml:model[@id='BIOMD0000000001']/sbml:listOfSpecies/sbml:species[@id='B']/@initialAmount")
    self.assertEqual(float(attr_value[0]), 1.66057788110262e-05)
  
  def test_add_xml(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_add_xml.xml',
      res_man=self.manager)
    flow.get_model_by_id('edelstein').apply_changes()
    name = flow.get_model_by_id('edelstein').evaluate_xpath(
      "/sbml:sbml/sbml:model[@id='BIOMD0000000001']/sbml:listOfSpecies/species[@id='Z']/@name")
    self.assertEqual(str(name[0]), 'fake_species')
  
  def test_change_xml(self):
    flow = workflow.WorkFlow(
      '${CMAKE_CURRENT_SOURCE_DIR}/test_change_xml.xml',
      res_man=self.manager)
    mod = flow.get_model_by_id('edelstein')
    mod.apply_changes()
    name = mod.evaluate_xpath(
      "/sbml:sbml/sbml:model[@id='BIOMD0000000001']/sbml:listOfSpecies/species[@id='Z']/@name")
    self.assertEqual(str(name[0]), 'fake_species')
    self.assertRaises(SystemExit, mod.evaluate_xpath,
      "/sbml:sbml/sbml:model[@id='BIOMD0000000001']/sbml:listOfSpecies/sbml:species[@id='B']")

if __name__ == '__main__':
    unittest.main()