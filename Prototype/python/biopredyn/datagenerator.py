#!/usr/bin/env python
# coding=utf-8

## @package biopredyn
## Copyright: [2012-2015] The CoSMo Company, All Rights Reserved
## License: BSD 3-Clause

import libsbml
import libsedml
from sympy import *
import variable, parameter

## Data generation class, used for creating outputs from task results in a
## SED-ML work flow.
class DataGenerator:
  ## @var id
  # A unique identifier for this object.
  ## @var math
  # A SymPy expression.
  ## @var name
  # Name of this object.
  ## @var parameters
  # A list of Parameter objects.
  ## @var variables
  # A list of Variable objects.
  
  ## Constructor; either 'data_generator' or 'idf' and 'math' must be
  ## passed as keyword argument(s).
  # @param self The object pointer.
  # @param workflow A WorkFlow object.
  # @param data_generator A libsedml.SedDataGenerator element; optional
  # (default: None).
  # @param idf A unique identifier; optional (default: None).
  # @param name A name for 'self'; optional (default: None).
  # @param math A valid MathML string; optional (default: None).
  def __init__(self, workflow, data_generator=None, idf=None, name=None,
    math=None):
    if data_generator is None and (idf is None or math is None):
      raise RuntimeError("Either 'data_generator' or 'idf' and 'math' " +
        "must be passed as keyword argument(s).")
    else:
      self.parameters = []
      self.variables = []
      if data_generator is not None:
        self.id = data_generator.getId()
        self.name = data_generator.getName()
        # Parse the input data_generator object for parameters
        for p in data_generator.getListOfParameters():
          self.add_parameter(parameter.Parameter(parameter=p))
        # Parse the input data_generator object for variables
        for v in data_generator.getListOfVariables():
          self.add_variable(variable.Variable(workflow, variable=v))
        self.math = self.parse_math_expression(data_generator.getMath())
      else:
        self.id = idf
        self.name = name
        self.math = sympify(math)
  
  ## String representation of this. Displays it as a hierarchy.
  # @param self The object pointer.
  # @return A string representing this as a hierarchy.
  def __str__(self):
    tree = "  |-dataGenerator id=" + self.id + " name=" + self.name + "\n"
    tree += "    |-listOfParameters\n"
    for p in self.parameters:
      tree += str(p)
    tree += "    |-listOfVariables\n"
    for v in self.variables:
      tree += str(v)
    return tree

  ## Appends the input biopredyn.parameter.Parameter object to self.parameters.
  # @param self The object pointer.
  # @param par A biopredyn.parameter.Parameter object.
  def add_parameter(self, par):
    self.parameters.append(par)

  ## Appends the input biopredyn.variable.Variable object to self.variables.
  # @param self The object pointer.
  # @param var A biopredyn.variable.Variable object.
  def add_variable(self, var):
    self.variables.append(var)
  
  ## Getter. Returns self.id.
  # @param self The object pointer.
  # @return self.id
  def get_id(self):
    return self.id
  
  ## Setter for self.id.
  # @param self The object pointer.
  # @param id New value for self.id.
  def set_id(self, id):
    self.id = id
  
  ## Getter. Returns self.math.
  # @param self The object pointer.
  # @return self.math
  def get_math(self):
    return self.math
  
  ## Setter for self.math.
  # @param self The object pointer.
  # @param math New value for self.id.
  def set_math(self, math):
    self.math = math
  
  ## Getter. Returns self.name.
  # @param self The object pointer.
  # @return self.name
  def get_name(self):
    return self.name
  
  ## Setter for self.name.
  # @param self The object pointer.
  # @param name New value for self.name.
  def set_name(self, name):
    self.name = name
  
  ## Returns the higher number of experiments among the data generated by each
  ## biopredyn.variable.Variable object in self.variables.
  # @param self The object pointer.
  # @return An integev.
  def get_num_experiments(self):
    num = 0
    for v in self.variables:
      if v.get_num_experiments() > num:
        num = v.get_num_experiments()
    return num

  ## Returns the number of time points in the variables used by this.
  # @param self The object pointer.
  # @return The number of time points in the variables used by this.
  def get_number_of_points(self):
    return self.variables[0].get_number_of_points()
  
  ## Evaluate the values encoded by this and returned them as a 1-dimensional
  ## array of time series.
  # @param self The object pointer.
  # @return results An array of array of numerical values.
  def get_values(self):
    # The number of time points to be considered must be known; it is assumed
    # that all the variables have the same number of time points
    num_time_points = self.variables[0].get_number_of_points()
    # The number of time series of all variables must be known too; it is also
    # assumed that all variables have the same number of experiments; except
    # 'time'
    num_exp = self.get_num_experiments()
    results = []
    for i in range(num_exp):
      # Initialization 
      res = []
      for t in range(num_time_points):
        res.append(self.math)
      # SymPy substitution - variables
      for v in self.variables:
        v_id = v.get_id()
        values = v.get_values()
        for t in range(num_time_points):
          if str.lower(v_id).__contains__('time'):
            res[t] = res[t].subs(v_id, values[t])
          else:
            res[t] = res[t].subs(v_id, values[t][i])
      # SymPy substitution - parameters
      for p in self.parameters:
        p_id = p.get_id()
        for t in range(num_time_points):
          res[t] = res[t].subs(p_id, p.get_value())
      results.append(res)
    return results
  
  ## Transform the input MathML mathematical expression into a SymPy
  # expression.
  # @param self The object pointer.
  # @param mathml A MathML expression.
  # @return math A SymPy expression.
  def parse_math_expression(self, mathml):
    math = sympify(libsbml.formulaToString(mathml))
    return math
