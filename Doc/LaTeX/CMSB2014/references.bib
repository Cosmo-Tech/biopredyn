@article{Kohn2008,
author = {K\"{o}hn, D and Novere, N Le},
journal = {Computational Methods in Systems Biology},
pages = {176--190},
title = {{SED-ML-â€“an XML format for the implementation of the MIASE guidelines}},
year = {2008}
}

@article{Hucka2003,
author = {Hucka, M. and Finney, A. and Sauro, H. M. and others},
doi = {10.1093/bioinformatics/btg015},
issn = {1367-4803},
journal = {Bioinformatics},
month = mar,
number = {4},
pages = {524--531},
title = {{The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models}},
volume = {19},
year = {2003}
}

@article{Dada2010,
abstract = {Research in systems biology is carried out through a combination of experiments and models. Several data standards have been adopted for representing models (Systems Biology Markup Language) and various types of relevant experimental data (such as FuGE and those of the Proteomics Standards Initiative). However, until now, there has been no standard way to associate a model and its entities to the corresponding datasets, or vice versa. Such a standard would provide a means to represent computational simulation results as well as to frame experimental data in the context of a particular model. Target applications include model-driven data analysis, parameter estimation, and sharing and archiving model simulations.},
author = {Dada, Joseph O and Spasi\'{c}, Irena and Paton, Norman W and others},
doi = {10.1093/bioinformatics/btq069},
issn = {1367-4811},
journal = {Bioinformatics (Oxford, England)},
keywords = {Computational Biology,Computational Biology: methods,Databases,Factual,Oligonucleotide Array Sequence Analysis,Software,Systems Biology,Systems Biology: methods},
month = apr,
number = {7},
pages = {932--8},
pmid = {20176582},
title = {{SBRML: a markup language for associating systems biology data with models.}},
volume = {26},
year = {2010}
}

@article{Cokelaer2013,
abstract = {MOTIVATION: Web interfaces provide access to numerous biological databases. Many can be accessed to in a programmatic way thanks to Web Services. Building applications that combine several of them would benefit from a single framework.

RESULTS: BioServices is a comprehensive Python framework that provides programmatic access to major bioinformatics Web Services (e.g. KEGG, UniProt, BioModels, ChEMBLdb). Wrapping additional Web Services based either on Representational State Transfer or Simple Object Access Protocol/Web Services Description Language technologies is eased by the usage of object-oriented programming. Availability and implementation: BioServices releases and documentation are available at http://pypi.python.org/pypi/bioservices under a GPL-v3 license.},
author = {Cokelaer, Thomas and Pultz, Dennis and Harder, Lea M and others},
doi = {10.1093/bioinformatics/btt547},
issn = {1367-4811},
journal = {Bioinformatics (Oxford, England)},
month = dec,
number = {24},
pages = {3241--2},
pmid = {24064416},
title = {{BioServices: a common Python package to access biological Web Services programmatically.}},
volume = {29},
year = {2013}
}

@article{Takizawa2013,
abstract = {MOTIVATION: The Systems Biology Markup Language (SBML) is currently supported by >230 software tools, among which 160 support numerical integration of ordinary differential equation (ODE) models. Although SBML is a widely accepted standard within this field, there is still no language-neutral library that supports all features of SBML for simulating ODE models. Therefore, a demand exists for a simple portable implementation of a numerical integrator that supports SBML to enhance the development of a computational platform for systems biology.

RESULTS: We implemented a library called libSBMLSim, which supports all the features of SBML and confirmed that the library passes all tests in the SBML test suite including those for SBML Events, AlgebraicRules, 'fast' attribute on Reactions and Delay. LibSBMLSim is implemented in the C programming language and does not depend on any third-party library except libSBML, which is a library to handle SBML documents. For the numerical integrator, both explicit and implicit methods are written from scratch to support all the functionality of SBML features in a straightforward implementation. We succeeded in implementing libSBMLSim as a platform-independent library that can run on most common operating systems (Windows, MacOSX and Linux) and also provides several language bindings (Java, C\#, Python and Ruby).

AVAILABILITY: The source code of libSBMLSim is available from http://fun.bio.keio.ac.jp/software/libsbmlsim/. LibSBMLSim is distributed under the terms of LGPL.

SUPPLEMENTARY INFORMATION: Supplementary data are available at Bioinformatics online.},
author = {Takizawa, Hiromu and Nakamura, Kazushige and Tabira, Akito and others},
doi = {10.1093/bioinformatics/btt157},
issn = {1367-4811},
journal = {Bioinformatics (Oxford, England)},
keywords = {Computer Simulation,Programming Languages,Software,Systems Biology,Systems Biology: methods},
month = jun,
number = {11},
pages = {1474--6},
pmid = {23564843},
title = {{LibSBMLSim: a reference implementation of fully functional SBML simulator.}},
volume = {29},
year = {2013}
}

@article{Ashyraliyev2009,
abstract = {Mathematical models of biological processes have various applications: to assist in understanding the functioning of a system, to simulate experiments before actually performing them, to study situations that cannot be dealt with experimentally, etc. Some parameters in the model can be directly obtained from experiments or from the literature. Others have to be inferred by comparing model results to experiments. In this minireview, we discuss the identifiability of models, both intrinsic to the model and taking into account the available data. Furthermore, we give an overview of the most frequently used approaches to search the parameter space.},
author = {Ashyraliyev, Maksat and Fomekong-Nanfack, Yves and Kaandorp, Jaap a and others},
doi = {10.1111/j.1742-4658.2008.06844.x},
issn = {1742-4658},
journal = {The FEBS journal},
keywords = {Algorithms,Biological,Computer Simulation,Models,Nonlinear Dynamics,Systems Biology},
month = feb,
number = {4},
pages = {886--902},
pmid = {19215296},
title = {{Systems biology: parameter estimation for biochemical models.}},
volume = {276},
year = {2009}
}

@article{Hoops2006,
abstract = {Simulation and modeling is becoming a standard approach to understand complex biochemical processes. Therefore, there is a big need for software tools that allow access to diverse simulation and modeling methods as well as support for the usage of these methods.},
author = {Hoops, Stefan and Sahle, Sven and Gauges, Ralph and others},
doi = {10.1093/bioinformatics/btl485},
issn = {1367-4811},
journal = {Bioinformatics (Oxford, England)},
keywords = {Algorithms,Computer Graphics,Computer Simulation,Models, Biological,Programming Languages,Protein Interaction Mapping,Protein Interaction Mapping: methods,Proteome,Proteome: metabolism,Signal Transduction,Signal Transduction: physiology,Software,User-Computer Interface},
month = dec,
number = {24},
pages = {3067--74},
pmid = {17032683},
title = {{COPASI--a COmplex PAthway SImulator.}},
volume = {22},
year = {2006}
}

@article{Ebrahim2013,
abstract = {BACKGROUND: COnstraint-Based Reconstruction and Analysis (COBRA) methods are widely used for genome-scale modeling of metabolic networks in both prokaryotes and eukaryotes. Due to the successes with metabolism, there is an increasing effort to apply COBRA methods to reconstruct and analyze integrated models of cellular processes. The COBRA Toolbox for MATLAB is a leading software package for genome-scale analysis of metabolism; however, it was not designed to elegantly capture the complexity inherent in integrated biological networks and lacks an integration framework for the multiomics data used in systems biology. The openCOBRA Project is a community effort to promote constraints-based research through the distribution of freely available software.

RESULTS: Here, we describe COBRA for Python (COBRApy), a Python package that provides support for basic COBRA methods. COBRApy is designed in an object-oriented fashion that facilitates the representation of the complex biological processes of metabolism and gene expression. COBRApy does not require MATLAB to function; however, it includes an interface to the COBRA Toolbox for MATLAB to facilitate use of legacy codes. For improved performance, COBRApy includes parallel processing support for computationally intensive processes.

CONCLUSION: COBRApy is an object-oriented framework designed to meet the computational challenges associated with the next generation of stoichiometric constraint-based models and high-density omics data sets.

AVAILABILITY: http://opencobra.sourceforge.net/},
author = {Ebrahim, Ali and Lerman, Joshua A and Palsson, Bernhard O and others},
doi = {10.1186/1752-0509-7-74},
issn = {1752-0509},
journal = {BMC systems biology},
keywords = {Genomics,Genomics: methods,Metabolic Networks and Pathways,Models, Biological,Programming Languages},
month = jan,
number = {1},
pages = {74},
pmid = {23927696},
publisher = {BMC Systems Biology},
title = {{COBRApy: COnstraints-Based Reconstruction and Analysis for Python.}},
volume = {7},
year = {2013}
}

@article{Bornstein2008,
abstract = {LibSBML is an application programming interface library for reading, writing, manipulating and validating content expressed in the Systems Biology Markup Language (SBML) format. It is written in ISO C and C++, provides language bindings for Common Lisp, Java, Python, Perl, MATLAB and Octave, and includes many features that facilitate adoption and use of both SBML and the library. Developers can embed libSBML in their applications, saving themselves the work of implementing their own SBML parsing, manipulation and validation software.},
author = {Bornstein, Benjamin J and Keating, Sarah M and Jouraku, Akiya and others},
doi = {10.1093/bioinformatics/btn051},
issn = {1367-4811},
journal = {Bioinformatics (Oxford, England)},
keywords = {Algorithms,Computer Simulation,Models, Biological,Programming Languages,Proteome,Proteome: metabolism,Signal Transduction,Signal Transduction: physiology,Software,Systems Biology,Systems Biology: methods,User-Computer Interface},
month = mar,
number = {6},
pages = {880--1},
pmid = {18252737},
title = {{LibSBML: an API library for SBML.}},
volume = {24},
year = {2008}
}

@article{Kitano2002,
abstract = {To understand biology at the system level, we must examine the structure and dynamics of cellular and organismal function, rather than the characteristics of isolated parts of a cell or organism. Properties of systems, such as robustness, emerge as central issues, and understanding these properties may have an impact on the future of medicine. However, many breakthroughs in experimental devices, advanced software, and analytical methods are required before the achievements of systems biology can live up to their much-touted potential.},
author = {Kitano, Hiroaki},
doi = {10.1126/science.1069492},
issn = {1095-9203},
journal = {Science (New York, N.Y.)},
keywords = {Animals,Biology,Cell Physiological Phenomena,Computational Biology,Computer Simulation,Drug Industry,Gene Expression Profiling,Gene Expression Regulation,Genomics,Models, Biological,Physiological Phenomena,Research,Software,Systems Theory},
month = mar,
number = {5560},
pages = {1662--4},
pmid = {11872829},
title = {{Systems biology: a brief overview.}},
volume = {295},
year = {2002}
}

@Article{Hunter2007,
Author = {Hunter, J. D.},
Title = {Matplotlib: A 2D graphics environment},
Journal = {Computing In Science \& Engineering},
Volume = {9},
Number = {3},
Pages = {90--95},
abstract = {Matplotlib is a 2D graphics package used for Python
for application development, interactive scripting, and
publication-quality image generation across user
interfaces and operating systems.},
publisher = {IEEE COMPUTER SOC},
year = 2007
}
